// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/jiachen/Git/mgcache/default_distributed_refresher.go

// Package mock_mgcache is a generated GoMock package.
package mock_mgcache

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockPubSubClientInterface is a mock of PubSubClientInterface interface.
type MockPubSubClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubClientInterfaceMockRecorder
}

// MockPubSubClientInterfaceMockRecorder is the mock recorder for MockPubSubClientInterface.
type MockPubSubClientInterfaceMockRecorder struct {
	mock *MockPubSubClientInterface
}

// NewMockPubSubClientInterface creates a new mock instance.
func NewMockPubSubClientInterface(ctrl *gomock.Controller) *MockPubSubClientInterface {
	mock := &MockPubSubClientInterface{ctrl: ctrl}
	mock.recorder = &MockPubSubClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubClientInterface) EXPECT() *MockPubSubClientInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPubSubClientInterface) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubClientInterfaceMockRecorder) Publish(ctx, channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubClientInterface)(nil).Publish), ctx, channel, message)
}

// Subscribe mocks base method.
func (m *MockPubSubClientInterface) Subscribe(ctx context.Context, channels ...string) *redis.PubSub {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubClientInterfaceMockRecorder) Subscribe(ctx interface{}, channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSubClientInterface)(nil).Subscribe), varargs...)
}
