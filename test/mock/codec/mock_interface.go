// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/jiachen/Git/mgcache/codec/interface.go

// Package mock_codec is a generated GoMock package.
package mock_codec

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICodec is a mock of ICodec interface.
type MockICodec struct {
	ctrl     *gomock.Controller
	recorder *MockICodecMockRecorder
}

// MockICodecMockRecorder is the mock recorder for MockICodec.
type MockICodecMockRecorder struct {
	mock *MockICodec
}

// NewMockICodec creates a new mock instance.
func NewMockICodec(ctrl *gomock.Controller) *MockICodec {
	mock := &MockICodec{ctrl: ctrl}
	mock.recorder = &MockICodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICodec) EXPECT() *MockICodecMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockICodec) Decode(bytes []byte, valuePtr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", bytes, valuePtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockICodecMockRecorder) Decode(bytes, valuePtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockICodec)(nil).Decode), bytes, valuePtr)
}

// Encode mocks base method.
func (m *MockICodec) Encode(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockICodecMockRecorder) Encode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockICodec)(nil).Encode), arg0)
}
