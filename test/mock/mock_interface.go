// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/jiachen/Git/mgcache/interface.go

// Package mock_mgcache is a generated GoMock package.
package mock_mgcache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICodec is a mock of ICodec interface.
type MockICodec struct {
	ctrl     *gomock.Controller
	recorder *MockICodecMockRecorder
}

// MockICodecMockRecorder is the mock recorder for MockICodec.
type MockICodecMockRecorder struct {
	mock *MockICodec
}

// NewMockICodec creates a new mock instance.
func NewMockICodec(ctrl *gomock.Controller) *MockICodec {
	mock := &MockICodec{ctrl: ctrl}
	mock.recorder = &MockICodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICodec) EXPECT() *MockICodecMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockICodec) Decode(bytes []byte, valuePtr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", bytes, valuePtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockICodecMockRecorder) Decode(bytes, valuePtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockICodec)(nil).Decode), bytes, valuePtr)
}

// Encode mocks base method.
func (m *MockICodec) Encode(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockICodecMockRecorder) Encode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockICodec)(nil).Encode), arg0)
}

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIStorage) Get(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIStorageMockRecorder) Get(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIStorage)(nil).Get), key, value)
}

// GetBytes mocks base method.
func (m *MockIStorage) GetBytes(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockIStorageMockRecorder) GetBytes(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockIStorage)(nil).GetBytes), key)
}

// Invalidate mocks base method.
func (m *MockIStorage) Invalidate(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockIStorageMockRecorder) Invalidate(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockIStorage)(nil).Invalidate), key)
}

// Refresh mocks base method.
func (m *MockIStorage) Refresh(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockIStorageMockRecorder) Refresh(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockIStorage)(nil).Refresh), key)
}

// Set mocks base method.
func (m *MockIStorage) Set(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIStorageMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIStorage)(nil).Set), key, value)
}

// MockIFallbackStorage is a mock of IFallbackStorage interface.
type MockIFallbackStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIFallbackStorageMockRecorder
}

// MockIFallbackStorageMockRecorder is the mock recorder for MockIFallbackStorage.
type MockIFallbackStorageMockRecorder struct {
	mock *MockIFallbackStorage
}

// NewMockIFallbackStorage creates a new mock instance.
func NewMockIFallbackStorage(ctrl *gomock.Controller) *MockIFallbackStorage {
	mock := &MockIFallbackStorage{ctrl: ctrl}
	mock.recorder = &MockIFallbackStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFallbackStorage) EXPECT() *MockIFallbackStorageMockRecorder {
	return m.recorder
}

// GetBytes mocks base method.
func (m *MockIFallbackStorage) GetBytes(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockIFallbackStorageMockRecorder) GetBytes(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockIFallbackStorage)(nil).GetBytes), key)
}

// Invalidate mocks base method.
func (m *MockIFallbackStorage) Invalidate(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockIFallbackStorageMockRecorder) Invalidate(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockIFallbackStorage)(nil).Invalidate), key)
}

// MockIDistributedRefresher is a mock of IDistributedRefresher interface.
type MockIDistributedRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockIDistributedRefresherMockRecorder
}

// MockIDistributedRefresherMockRecorder is the mock recorder for MockIDistributedRefresher.
type MockIDistributedRefresherMockRecorder struct {
	mock *MockIDistributedRefresher
}

// NewMockIDistributedRefresher creates a new mock instance.
func NewMockIDistributedRefresher(ctrl *gomock.Controller) *MockIDistributedRefresher {
	mock := &MockIDistributedRefresher{ctrl: ctrl}
	mock.recorder = &MockIDistributedRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDistributedRefresher) EXPECT() *MockIDistributedRefresherMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockIDistributedRefresher) Notify(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockIDistributedRefresherMockRecorder) Notify(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockIDistributedRefresher)(nil).Notify), key)
}
